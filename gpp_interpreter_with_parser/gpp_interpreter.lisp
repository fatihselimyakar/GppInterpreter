; *********************************************
; *  341 Programming Languages HW2-Part2      *
; *  Fall 2019                                *
; *  Author: Fatih Selim Yakar                *
; *  No: 161044054                            *
; *********************************************

;KEYWORDS
(defconstant DEFFUN "KW_DEFFUN")
(defconstant DEFVAR "KW_DEFVAR")
(defconstant CONCAT "KW_CONCAT")
(defconstant FALSE "KW_FALSE")
(defconstant APPEND "KW_APPEND")
(defconstant WHILE "KW_WHILE") 
(defconstant EQUAL "KW_EQUAL")
(defconstant TRUE "KW_TRUE")
(defconstant DISP "KW_DISP")
(defconstant EXIT "KW_EXIT")
(defconstant LESS "KW_LESS")
(defconstant LIST "KW_LIST")
(defconstant AND "KW_AND")
(defconstant SET "KW_SET")
(defconstant FOR "KW_FOR")
(defconstant NL "KW_NIL")
(defconstant NOT "KW_NOT")
(defconstant OR "KW_OR")
(defconstant IF "KW_IF")
(defconstant LOAD "KW_LOAD")

;OPERATORS
(defconstant DBLMULT "OP_DBLMULT")
(defconstant PLUS "OP_PLUS")
(defconstant MINUS "OP_MINUS")
(defconstant DIV "OP_DIV")
(defconstant MULT "OP_MULT")
(defconstant OP "OP_OP")
(defconstant CP "OP_CP")
(defconstant OC "OP_OC")
(defconstant CC "OP_CC")
(defconstant COMMA "OP_COMMA")
(defconstant LISTOP "OP_LISTOP")

;VALUES,COMMENTS,IDENTIFIERS
(defconstant VALUE "VALUE")
(defconstant COMMENT "COMMENT")
(defconstant IDENTIFIER "IDENTIFIER")

;Function runs lexer for the file.
(defun read-file-g++ (filename)
	(let ((word-list (list )) (tokenList ) (parserRes ))
		(with-open-file (file-stream filename)
			(when file-stream
				(loop for line = (read-line file-stream nil)
					while line 
						do 
                        (setq tokenList (lexer (concatenate 'string line " ")))
                        (setq parserRes (parser tokenList))
                        (when (not (equal parserRes "[404]"))
                            (format t "Syntax OK.~%")
                            (format t "Result:~A~%~%" parserRes) 
                        )
                )
				(close file-stream)
			)
		)
	)
)

;Function runs lexer for the terminal.
(defun read-terminal-g++ ()
    (let ((user-input "")(index 0)(parserRes )(tokenList ))
        (loop while (not (equal user-input "(exit) "))
            do
            (format t "[~A]> "index)
            (setq user-input (concatenate 'string (read-line) " "))
            (setq tokenList (lexer user-input))
            (setq parserRes (parser tokenList))
            (when (not (equal parserRes "[404]"))
                (format t "Syntax OK.~%")
                (format t "Result:~A~%~%" parserRes) 
            )
            (incf index 1)
        )
    )
)

;Lexical analyzer for g++
(defun lexer(np_string)
    (let( (totalList (list )) (charList (list )) (tokenList (list )) (c_count 0) (parathesis_flag nil) (mult_flag nil) (id_flag nil) (digitList (list #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)) 
          (alphabet '(#\. #\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)) )
        (loop for i from 0 to (- (length np_string) 1)
            do
            (setq id_flag nil)
            (setq mult_flag nil)
            (loop while (and (or (equal (char np_string i) #\Space) (equal (char np_string i) #\newline) (equal (char np_string i) #\tab)) (< i (- (length np_string) 1)) )
                do
                (setq i (+ i 1))
            )
            ;2 CHARACTER LEXEME'S HANDLING
            ;Comment handling ---> ";;".*
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) ";;")
                    ;(format t "~A ~%" COMMENT)
                    ;(setq tokenList (append tokenList (list COMMENT)))
                    ;(setq charList (append charList (list ";;")))
                    (setq id_flag T)
                    (setq totalList(append totalList (list charList)))
                    (setq totalList(append totalList (list tokenList)))
                    (return-from lexer totalList)
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "or")
                    (let ((flag t))
                        (if (<= (+ i 2) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 2)) digitList)) (not (member (char np_string (+ i 2)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" OR)
                            (setq tokenList (append tokenList (list OR)))
                            (setq charList (append charList (list "or")))
                            (setq id_flag T)
                            (setq i (+ i 1))
                        )
                    )  
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "if")
                    (let ((flag t))
                        (if (<= (+ i 2) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 2)) digitList)) (not (member (char np_string (+ i 2)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" IF)
                            (setq tokenList (append tokenList (list IF)))
                            (setq charList (append charList (list "if")))
                            (setq id_flag T)
                            (setq i (+ i 1))
                        )
                    ) 
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "**")
                    ;(format t "~A ~%" DBLMULT)
                    (setq tokenList (append tokenList (list DBLMULT)))
                    (setq charList (append charList (list "**")))
                    (setq id_flag T)
                    (setq i (+ i 1))
                    (setq mult_flag t)
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "'(")
                    ;(format t "~A ~%" DBLMULT)
                    (setq tokenList (append tokenList (list LISTOP)))
                    (setq charList (append charList (list "'(")))
                    (setq id_flag T)
                    (setq i (+ i 1))
                    (setq parathesis_flag t)
                )
            )
            ;1 CHARACTER LEXEME'S HANDLING
            (when (equal (subseq np_string i (+ i 1)) "+")
                ;(format t "~A ~%" PLUS)
                (setq tokenList (append tokenList (list PLUS)))
                (setq charList (append charList (list "+")))
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "-")
                ;(format t "~A ~%" MINUS)
                (setq tokenList (append tokenList (list MINUS)))
                (setq charList (append charList (list "-")))
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "/")
                ;(format t "~A ~%" DIV)
                (setq tokenList (append tokenList (list DIV)))
                (setq charList (append charList (list "/")))
                (setq id_flag T)
            )
            (when (and (equal (subseq np_string i (+ i 1)) "*") (equal mult_flag nil))
                ;(format t "~A ~%" MULT)
                (setq tokenList (append tokenList (list MULT)))
                (setq charList (append charList (list "*")))
                (setq id_flag T)
            )
            (when (and (equal (subseq np_string i (+ i 1)) "(") (equal parathesis_flag nil))
                ;(format t "~A ~%" OP)
                (setq tokenList (append tokenList (list OP)))
                (setq charList (append charList (list "(")))
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) ")")
                ;(format t "~A ~%" CP)
                (setq tokenList (append tokenList (list CP)))
                (setq charList (append charList (list ")")))
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) ",")
                ;(format t "~A ~%" COMMA)
                (setq tokenList (append tokenList (list COMMA)))
                (setq charList (append charList (list ",")))
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "\"")
                (if (= (mod c_count 2) 0)
                    ;(format t "~A ~%" OC)
                    (when t
                        (setq tokenList (append tokenList (list OC)))
                        (setq charList (append charList (list "\"")))
                    ) 
                ;(format t "~A ~%" CC)
                (when t
                    (setq tokenList (append tokenList (list CC)))
                    (setq charList (append charList (list "\"")))
                )
                )
                (setq c_count (+ c_count 1))
                (setq id_flag T)
            )
            ;3 CHARACTER LEXEME'S HANDLING 
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "and")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" AND)
                            (setq tokenList (append tokenList (list AND)))
                            (setq charList (append charList (list "and")))
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )       
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "not")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" NOT)
                            (setq tokenList (append tokenList (list NOT)))
                            (setq charList (append charList (list "not")))
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )   
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "nil")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" NL)
                            (setq tokenList (append tokenList (list NL)))
                            (setq charList (append charList (list "nil")))
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "set")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" SET)
                            (setq tokenList (append tokenList (list SET)))
                            (setq charList (append charList (list "set")))
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "for")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" FOR)
                            (setq tokenList (append tokenList (list FOR)))
                            (setq charList (append charList (list "for")))
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            ;4 CHARACTER LEXEME'S HANDLING 
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "less")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" LESS)
                            (setq tokenList (append tokenList (list LESS)))
                            (setq charList (append charList (list "less")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )    
                )
            )
            (when (<= (+ i 3) (- (length np_string) 1)) 
                (when (equal (subseq np_string i (+ i 4)) "list")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" LIST)
                            (setq tokenList (append tokenList (list LIST)))
                            (setq charList (append charList (list "list")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )    
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "load")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" LOAD)
                            (setq tokenList (append tokenList (list LOAD)))
                            (setq charList (append charList (list "load")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    ) 
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "exit")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" EXIT)
                            (setq tokenList (append tokenList (list EXIT)))
                            (setq charList (append charList (list "exit")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "disp")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" DISP)
                            (setq tokenList (append tokenList (list DISP)))
                            (setq charList (append charList (list "disp")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "true")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" TRUE)
                            (setq tokenList (append tokenList (list TRUE)))
                            (setq charList (append charList (list "true")))
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;5 CHARACTER LEXEME'S HANDLING
            (if (<= (+ i 4) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 5)) "equal")
                    (let ((flag t))
                        (if (<= (+ i 5) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 5)) digitList)) (not (member (char np_string (+ i 5)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" EQUAL)
                            (setq tokenList (append tokenList (list EQUAL)))
                            (setq charList (append charList (list "equal")))
                            (setq i (+ i 4))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 4) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 5)) "false")
                    (let ((flag t))
                        (if (<= (+ i 5) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 5)) digitList)) (not (member (char np_string (+ i 5)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" FALSE)
                            (setq tokenList (append tokenList (list FALSE)))
                            (setq charList (append charList (list "false")))
                            (setq i (+ i 4))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 4) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 5)) "while")
                    (let ((flag t))
                        (if (<= (+ i 5) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 5)) digitList)) (not (member (char np_string (+ i 5)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" FALSE)
                            (setq tokenList (append tokenList (list WHILE)))
                            (setq charList (append charList (list "while")))
                            (setq i (+ i 4))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;6 CHARACTER LEXEME'S HANDLING
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "append")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" APPEND)
                            (setq tokenList (append tokenList (list APPEND)))
                            (setq charList (append charList (list "append")))
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "concat")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" CONCAT)
                            (setq tokenList (append tokenList (list CONCAT)))
                            (setq charList (append charList (list "concat")))
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    ) 
                )
            )
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "deffun")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" DEFFUN)
                            (setq tokenList (append tokenList (list DEFFUN)))
                            (setq charList (append charList (list "deffun")))
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "defvar")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            ;(format t "~A ~%" DEFFUN)
                            (setq tokenList (append tokenList (list DEFVAR)))
                            (setq charList (append charList (list "defvar")))
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;FOR VALUES --->[1-9][0-9]*|"0"
            (when (member (char np_string i) digitList)
                ;FOR VALUE ---> "0"
                (if (<= (+ i 1) (- (length np_string) 1))
                    (when (and (equal (char np_string i) #\0) (not (member (char np_string (+ i 1)) digitList)))
                        ;(format t "~A ~%" VALUE)
                        (setq tokenList (append tokenList (list VALUE)))
                        (setq charList (append charList (list "0")))
                        (setq id_flag T)
                    )
                )
                (when (and (= i (- (length np_string) 1)) (equal (char np_string i) #\0))
                    ;(format t "~A ~%" VALUE)
                    (setq tokenList (append tokenList (list VALUE)))
                    (setq charList (append charList (list "0")))
                    (setq id_flag T)
                )
                ;FOR VALUE ---> [1-9][0-9]* 
                (let ((valueString (string "")))
                    (when (not (equal (char np_string i) #\0))
                        (loop while (and (member (char np_string i) digitList) (<= i (- (length np_string) 1)))
                            do
                            (setq valueString (concatenate 'string valueString (string (char np_string i))))
                            (setq i (+ i 1))           
                        )
                        ;(format t "~A ~%" VALUE)
                        (setq tokenList (append tokenList (list VALUE)))
                        (setq charList (append charList (list valueString)))
                        (setq i (- i 1))
                        (setq id_flag T)
                    )
                )
            )
            ;FOR IDENTIFIERS ---> [a-zA-Z][a-zA-Z0-9]*
            (let ((idString (string "")))
                (when (and (equal id_flag nil) (member (char-downcase (char np_string i)) alphabet))
                    (loop while (and (or (member (char-downcase (char np_string i)) alphabet) (member (char np_string i) digitList) ) (<= i (- (length np_string) 1)))
                        do
                        (setq idString (concatenate 'string idString (string (char np_string i))))
                        (setq i (+ i 1))
                    )
                    ;(format t "~A ~%" IDENTIFIER)
                    (setq tokenList (append tokenList (list IDENTIFIER)))
                    (setq charList (append charList (list idString)))
                    (setq i (- i 1))
                    (setq id_flag T)     
                )
            )
            ;FOR ERROR
            (when (and (equal id_flag nil) (not (or (equal (char np_string i) #\Space) (equal (char np_string i) #\newline) (equal (char np_string i) #\tab))))
                (format t "SYNTAX_ERROR IN ~A SYMBOL!~%" (char np_string i))
                (return-from lexer)
            )
        )
        (setq totalList(append totalList (list charList)))
        (setq totalList(append totalList (list tokenList)))
        totalList
    )
)

;checks number of "(" and ")" equality 
(defun paranthesisChecker (strList)
    (let ((parCounter 0))
        (loop for i from 0 to (- (length strList) 1)
            do
            (if (or (equal (nth i strList) "(") (equal (nth i strList) "'("))
                (incf parCounter 1)
            )
            (when (equal (nth i strList) ")")
                (if (= parCounter 0)
                    (return-from paranthesisChecker nil)
                )
                (decf parCounter 1)
            )
            (if (and (equal parCounter 0) (< i (- (length strList) 1)))
                (return-from paranthesisChecker nil)
            )
        )
        (if (equal parCounter 0)
            (return-from paranthesisChecker t)
        nil
        )
    )
    
)

;Syntax analyzer for g++
(defun parser(tokenList)
    (let ((result nil) (errorFlag t) (chars (nth 0 tokenList)) (tokens (nth 1 tokenList)))
        (when (not (paranthesisChecker chars))
            (format t "SYNTAX_ERROR Expression not recognized~%~%")
            (return-from parser "[404]")
        )
        (if (or (equal chars nil) (equal tokens nil))
            (return-from parser t)
        )
        (if (equal (length tokens) 1)
            (when (or (equal (nth 0 tokens) "VALUE") (equal (nth 0 tokens) "KW_NIL") (equal (nth 0 tokens) "KW_FALSE") (equal (nth 0 tokens) "KW_TRUE") (equal (nth 0 tokens) "IDENTIFIER"))
                (if (equal (nth 0 tokens) "VALUE")
                    (setq result (nth 0 chars))
                )
                (if (or (equal (nth 0 tokens) "KW_NIL") (equal (nth 0 tokens) "KW_FALSE"))
                    (setq result nil)
                )
                (if (equal (nth 0 tokens) "KW_TRUE")
                    (setq result t)
                )
                (if (equal (nth 0 tokens) "IDENTIFIER")
                    (setq result (string-upcase (nth 0 chars) ))
                )
                (setq errorFlag nil)
            )
        )
        (let ((numStr "") (syntaxError t) )
            (when (and (equal (nth 0 tokens) "OP_OP") (or (equal (nth 1 tokens) "KW_DEFVAR") (equal (nth 1 tokens) "KW_SET")))
                (setq errorFlag nil)
                (when (equal (nth 2 tokens) "IDENTIFIER")
                    (setq syntaxError nil)
                    (setq numStr (concatenate 'string numStr (nth 2 chars)))
                )
                (when syntaxError
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (setq syntaxError t)
                (when (or (equal (nth 3 tokens) "OP_OP") (equal (nth 3 tokens) "VALUE"))
                    (if (equal (nth 3 tokens) "VALUE")
                        (setq numStr (concatenate 'string numStr "=" (nth 3 chars)))
                    (let ((i 3)(totalList (list ))(counter 1)(comeFromParser ))
                        (loop while (not (equal counter 0))
                            do
                            (setq i (+ i 1))
                            (if (equal (nth i tokens) "OP_OP")
                                (incf counter 1)
                                (if (equal (nth i tokens) "OP_CP")
                                    (decf counter 1)
                                )
                            )
                        )
                        (setq totalList(append totalList (list (subseq chars 3 (+ i 1)))))
                        (setq totalList(append totalList (list (subseq tokens 3 (+ i 1)))))
                        ;(print totalList)
                        (setq comeFromParser (parser totalList))
                        (if (integerp comeFromParser)
                            (setq syntaxError nil)
                        (setq syntaxError t)
                        )
                        (if (not syntaxError) 
                            (setq numStr (concatenate 'string numStr "=" (write-to-string comeFromParser)))
                        (when t
                            (format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "[404]")
                        )
                        )
                    )
                    )
                    (setq syntaxError nil)
                )
                (when syntaxError
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (setq result numStr)
            )   
            
        )
        (let ((numSum 0) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "OP_PLUS"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (setq syntaxError t)
                    (when (equal (nth i tokens) "VALUE")
                        (setq numSum (+ numSum (parse-integer (nth i chars))))
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (setq numSum (+ numSum comeFromParser))
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                            
                        )
                    )
                    (if (equal (nth i tokens) "OP_CP")
                        (setq syntaxError nil)
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return-from parser numSum)
                    ;)
                )
                (setq result numSum)
            )    
        )
        (let ((numSum 0) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "OP_MINUS"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (equal (nth i tokens) "VALUE")
                        (if (= i 2)
                            (setq numSum (parse-integer (nth i chars)))
                        (setq numSum (- numSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq numSum comeFromParser)
                                (setq numSum (- numSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result numSum)
            )
        )
        (let ((numSum 0) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "OP_DIV"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (equal (nth i tokens) "VALUE")
                        (if (= i 2)
                            (setq numSum (parse-integer (nth i chars)))
                        (setq numSum (/ numSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq numSum comeFromParser)
                                (setq numSum (/ numSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result numSum)
            )   
        )
        (let ((numSum 0) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "OP_MULT"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (equal (nth i tokens) "VALUE")
                        (if (= i 2)
                            (setq numSum (parse-integer (nth i chars)))
                        (setq numSum (* numSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq numSum comeFromParser)
                                (setq numSum (* numSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result numSum)
            )   
        )
        (let ((numSum 0) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "OP_DBLMULT"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (equal (nth i tokens) "VALUE")
                        (if (= i 2)
                            (setq numSum (parse-integer (nth i chars)))
                        (setq numSum (expt numSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq numSum comeFromParser)
                                (setq numSum (expt numSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result numSum)
            )   
        )
        (let ((boolSum ) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_AND"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (or (equal (nth i tokens) "KW_TRUE") (equal (nth i tokens) "KW_NIL") (equal (nth i tokens) "KW_FALSE"))
                        (if (= i 2)
                            (if (equal (nth i tokens) "KW_TRUE")
                                (setq boolSum t)
                            (setq boolSum nil)
                            )
                        (if (equal (nth i tokens) "KW_TRUE")
                            (setq boolSum (and boolSum t))
                        (setq boolSum (and boolSum nil))
                        )
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (typep comeFromParser 'boolean)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq boolSum comeFromParser)
                                (setq boolSum (and boolSum comeFromParser))
                                )
                            (when t
                               (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result boolSum)
            )   
        )
        (let ((boolSum ) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_OR"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (or (equal (nth i tokens) "KW_TRUE") (equal (nth i tokens) "KW_NIL") (equal (nth i tokens) "KW_FALSE"))
                        (if (= i 2)
                            (if (equal (nth i tokens) "KW_TRUE")
                                (setq boolSum t)
                            (setq boolSum nil)
                            )
                        (if (equal (nth i tokens) "KW_TRUE")
                            (setq boolSum (or boolSum t))
                        (setq boolSum (or boolSum nil))
                        )
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (typep comeFromParser 'boolean)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq boolSum comeFromParser)
                                (setq boolSum (or boolSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (setq result boolSum)
            )   
        )
        (let ((boolSum ) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_NOT"))
                (setq errorFlag nil)
                (when (or (equal (nth 2 tokens) "KW_TRUE") (equal (nth 2 tokens) "KW_NIL") (equal (nth 2 tokens) "KW_FALSE"))
                    (if (equal (nth 2 tokens) "KW_TRUE")
                        (setq boolSum nil)
                    (setq boolSum t)
                    )
                    (setq syntaxError nil)
                )
                (when (equal (nth 2 tokens) "OP_OP")
                    (let ((index 2)(i 2)(totalList (list ))(counter 1)(comeFromParser ))
                        (loop while (not (equal counter 0))
                            do
                            (setq i (+ i 1))
                            (if (equal (nth i tokens) "OP_OP")
                                (incf counter 1)
                                (if (equal (nth i tokens) "OP_CP")
                                    (decf counter 1)
                                )
                            )
                        )
                        (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                        (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                        ;(print totalList)
                        (setq comeFromParser (parser totalList))
                        (if (typep comeFromParser 'boolean)
                            (setq syntaxError nil)
                        (setq syntaxError t)
                        )
                        (if (not syntaxError) 
                            (setq boolSum (not comeFromParser))
                        (when t
                            (format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "[404]")
                        )
                        )
                        
                    )
                )
                (if (equal (nth 2 tokens) "OP_CP") 
                    (setq syntaxError nil)
                )
                (when syntaxError
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (setq result boolSum)   
            )
            
        )
        (let ((boolSum ) (syntaxError t) (counterFlag 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_EQUAL"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (or (equal (nth i tokens) "KW_TRUE") (equal (nth i tokens) "KW_NIL") (equal (nth i tokens) "KW_FALSE"))
                        (incf counterFlag 1)
                        (if (= i 2)
                            (if (equal (nth i tokens) "KW_TRUE")
                                (setq boolSum t)
                            (setq boolSum nil)
                            )
                        (if (equal (nth i tokens) "KW_TRUE")
                            (setq boolSum (equal boolSum t))
                        (setq boolSum (equal boolSum nil))
                        )
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "VALUE") 
                        (incf counterFlag 1)
                        (if (= i 2)
                            (setq boolSum (parse-integer (nth i chars)))
                        (setq boolSum (equal boolSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (incf counterFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (or (equal boolSum nil) (and (typep comeFromParser 'boolean) (typep boolSum 'boolean)) (and (integerp comeFromParser) (integerp boolSum )))
                                (when t
                                    (if (= index 2)
                                        (setq boolSum comeFromParser)
                                    (setq boolSum (equal boolSum comeFromParser))
                                    )
                                    (setq syntaxError nil)
                                )
                                
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when (or syntaxError (> counterFlag 2))
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (setq result boolSum)
            )   
        )
        (let ((boolSum ) (syntaxError t) (counterFlag 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_LESS"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (equal (nth i tokens) "VALUE") 
                        (incf counterFlag 1)
                        (if (= i 2)
                            (setq boolSum (parse-integer (nth i chars)))
                        (setq boolSum (< boolSum (parse-integer (nth i chars))))
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        (incf counterFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (if (= index 2)
                                    (setq boolSum comeFromParser)
                                (setq boolSum (< boolSum comeFromParser))
                                )
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when (or syntaxError (> counterFlag 2))
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (if (= counterFlag 1)
                    (setq result t)
                (setq result boolSum)
                )  
            )   
        )
        (let ((listSum (list )) (syntaxError t) (startIndex ))
            (when (or (equal (nth 0 tokens) "OP_LISTOP") (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_LIST")))
                (setq errorFlag nil)
                (if (equal (nth 0 tokens) "OP_LISTOP")
                    (setq startIndex 1)
                (setq startIndex 2)
                )
                (loop for i from startIndex to (- (length chars) 1)
                    do
                    (setq syntaxError t)
                    (when (equal (nth i tokens) "VALUE") 
                        (setq listSum (append listSum (list (parse-integer (nth i chars)))))
                        (setq syntaxError nil)
                    )
                    (if (equal (nth i tokens) "OP_CP")
                        (setq syntaxError nil)
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (setq result listSum)
            )
        )
        (let ((listSum ) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "IDENTIFIER") (or (equal (nth 2 tokens) "OP_OP") (equal (nth 2 tokens) "OP_LISTOP")))
                (setq errorFlag nil)
                ;(setq listSum (append listSum (list (nth 1 chars))))
                (format t "IDENTIFIER:~A~%" (nth 1 chars))
                (loop for i from 2 to (- (length chars) 1)
                    do
                    ;(setq syntaxError t)
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (setq listSum (append listSum comeFromParser))
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                        (setq syntaxError nil)
                    )

                    (if (equal (nth i tokens) "OP_CP")
                        (setq syntaxError nil)
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    
                )
                (setq result listSum)
            )
        )
        (let ((listSum (list )) (syntaxError t))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "IDENTIFIER") (not (or (equal (nth 2 tokens) "OP_OP") (equal (nth 2 tokens) "OP_LISTOP"))))
                (setq errorFlag nil)
                (loop for i from 1 to (- (length chars) 1)
                    do
                    (setq syntaxError t)
                    (when (equal (nth i tokens) "IDENTIFIER") 
                        (setq listSum (append listSum (list (nth i chars))))
                        (setq syntaxError nil)
                    )
                    (if (equal (nth i tokens) "OP_CP")
                        (setq syntaxError nil)
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (setq result listSum)
            )
        )
        (let ((listSum (list ) ) (syntaxError t) (counterFlag 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_CONCAT"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (incf counterFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (setq listSum (append listSum comeFromParser))
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                        (setq syntaxError nil)
                    )
                    ;(print counterFlag)
                    (when (or syntaxError (> counterFlag 2))
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (if (= counterFlag 1)
                    (setq result t)
                (setq result listSum)
                )  
            )   
        )
        (let ((listSum (list ) ) (syntaxError t) (explistFlag 0) (expiFlag 0) (index1 -1) (index2 -1) )
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_APPEND"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (and (equal (nth i tokens) "OP_OP") (not (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))))
                        (setq index1 i)
                        (incf expiFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (setq listSum (append listSum (list comeFromParser)))
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "VALUE")
                        (setq index1 i)
                        (incf expiFlag 1)
                        (setq syntaxError nil)
                        (setq listSum (append listSum (list (parse-integer (nth i chars)))))
                    )
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (incf explistFlag 1)
                        (setq index2 i)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError) 
                                (setq listSum (append listSum comeFromParser))
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                        (setq syntaxError nil)
                    )
                    (when (or syntaxError (> expiFlag 1) (> explistFlag 1))
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (when (or (not (= expiFlag 1)) (not (= explistFlag 1)) (<= index2 index1))
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (setq result listSum)
            )   
        )
        (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_EXIT") (equal (nth 2 tokens) "OP_CP") )
            (setq result "Bye.")
            (setq errorFlag nil)
        )
        (when (and (equal (nth 0 tokens) "OP_OP") 
            (equal (nth 1 tokens) "KW_LOAD") 
            (equal (nth 2 tokens) "OP_OC")
            (equal (nth 3 tokens) "IDENTIFIER")
            (equal (nth 4 tokens) "OP_CC")
            (equal (nth 5 tokens) "OP_CP") )
            ;(print (load (nth 3 chars)))
            (setq result (nth 3 chars))
            (setq errorFlag nil)
        )
        (let ((idSum "") (syntaxErrorCountID 0) (syntaxErrorCountLst 0) (idFindIndex 0) (explistFindIndex 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_DEFFUN") (equal (nth 2 tokens) "IDENTIFIER"))
                (setq errorFlag nil)
                (setq idSum (string-upcase (nth 2 chars)))
                (loop for i from 3 to (- (length chars) 1)
                    do
                    (when (and (equal (nth i tokens) "OP_OP") (equal (nth (+ 1 i) tokens) "IDENTIFIER"))
                        (setq idFindIndex i)
                        (incf syntaxErrorCountID 1)
                    )
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (setq explistFindIndex i)
                        (incf syntaxErrorCountLst 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (when syntaxError
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                        )
                    )
                )
                (when (or (> syntaxErrorCountLst 1) (> syntaxErrorCountID 1) (> idFindIndex explistFindIndex) (equal idFindIndex 0) (equal explistFindIndex 0))
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (setq result idSum)
            )
        )
        (let ((boolSum ) (listSum ) (syntaxError t) (explist1 nil) (explist2 nil) (explistFlag 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (or (equal (nth 1 tokens) "KW_IF") (equal (nth 1 tokens) "KW_WHILE")))
                (setq errorFlag nil)
                (when (or (equal (nth 2 tokens) "KW_TRUE") (equal (nth 2 tokens) "KW_NIL") (equal (nth 2 tokens) "KW_FALSE"))
                    (if (equal (nth 2 tokens) "KW_TRUE")
                        (setq boolSum t)
                    (setq boolSum nil)
                    )
                )
                (when (equal (nth 2 tokens) "OP_OP")
                    (let ((index 2)(i 2)(totalList (list ))(counter 1)(comeFromParser ))
                        (loop while (not (equal counter 0))
                            do
                            (setq i (+ i 1))
                            (if (equal (nth i tokens) "OP_OP")
                                (incf counter 1)
                                (if (equal (nth i tokens) "OP_CP")
                                    (decf counter 1)
                                )
                            )
                        )
                        (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                        (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                        ;(print totalList)
                        (setq comeFromParser (parser totalList))
                        (if (typep comeFromParser 'boolean)
                            (setq syntaxError nil)
                        (setq syntaxError t)
                        )
                        (if (not syntaxError) 
                            (if (= index 2)
                                (setq boolSum comeFromParser)
                            (setq boolSum (or boolSum comeFromParser))
                            )
                        (when t
                            (format t "SYNTAX_ERROR Expression not recognized~%~%")
                            (return-from parser "[404]")
                        )
                        )
                    )
                )
                (when (not (or (equal (nth 2 tokens) "OP_OP") (equal (nth 2 tokens) "KW_TRUE") (equal (nth 2 tokens) "KW_NIL") (equal (nth 2 tokens) "KW_FALSE")) ) 
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (incf explistFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError)
                                (if (= explistFlag 1)
                                    (setq explist1 (append listSum comeFromParser))
                                    (if (= explistFlag 2)
                                        (setq explist2 (append listSum comeFromParser))
                                    )
                                ) 
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    ;(if (equal (nth i tokens) "OP_CP")
                    ;    (return numSum)
                    ;)
                )
                (when (or (= explistFlag 0) (> explistFlag 2))
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                (if boolSum
                    (setq result explist1)
                (setq result explist2)
                )
                
            )   
        )
        (let ((numSum )(expCounter 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_DISP"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (and  (equal (nth i tokens) "OP_OC")
                        (equal (nth (+ 1 i) tokens) "IDENTIFIER")
                        (equal (nth (+ 2 i) tokens) "OP_CC")
                        (incf expCounter 1)
                        (setq numSum (nth (+ 1 i) chars)))
                    )
                    (when (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                        (incf expCounter 1)
                        (let ((index i)(totalList (list ))(counter 1))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq numSum (parser totalList))
                        )
                    )
                    (when (or (equal (nth i tokens) "KW_TRUE") (equal (nth i tokens) "KW_NIL") (equal (nth i tokens) "KW_FALSE"))
                        (incf expCounter 1)
                        (if (equal (nth i tokens) "KW_TRUE")
                            (setq numSum t)
                        (setq numSum nil)
                        )
                    )
                    (when (equal (nth i tokens) "VALUE")
                        (incf expCounter 1)
                        (setq numSum (parse-integer (nth i chars) ))
                    )
                )
                (when (> expCounter 1)
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )   
                (setq result numSum)
            )
        )
        (let ((numSum )(expCounter 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_DISP"))
                (setq errorFlag nil)
                (loop for i from 2 to (- (length chars) 1)
                    do
                    (when (and  (equal (nth i tokens) "OP_OC")
                        (equal (nth (+ 1 i) tokens) "IDENTIFIER")
                        (equal (nth (+ 2 i) tokens) "OP_CC")
                        (incf expCounter 1)
                        (setq numSum (nth (+ 1 i) chars)))
                    )
                    (when (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                        (incf expCounter 1)
                        (let ((index i)(totalList (list ))(counter 1))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq numSum (parser totalList))
                        )
                    )
                    (when (or (equal (nth i tokens) "KW_TRUE") (equal (nth i tokens) "KW_NIL") (equal (nth i tokens) "KW_FALSE"))
                        (incf expCounter 1)
                        (if (equal (nth i tokens) "KW_TRUE")
                            (setq numSum t)
                        (setq numSum nil)
                        )
                    )
                    (when (equal (nth i tokens) "VALUE")
                        (incf expCounter 1)
                        (setq numSum (parse-integer (nth i chars) ))
                    )
                )
                (when (> expCounter 1)
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )   
                (setq result numSum)
            )
        )
        (let ((listSum 0) (syntaxError t)(i )(parCounter 0)(expiCounter 0)(explistFlag 0))
            (when (and (equal (nth 0 tokens) "OP_OP") (equal (nth 1 tokens) "KW_FOR") 
                    (equal (nth 2 tokens) "OP_OP") (equal (nth 3 tokens) "IDENTIFIER"))
                (setq errorFlag nil)
                (setq i 4)
                (incf parCounter 1)
                (loop while (and (not (equal parCounter 0)) (< i (- (length chars) 1))) 
                    do
                    (when (equal (nth i tokens) "VALUE")
                        (incf expiCounter 1)
                        (setq syntaxError nil)
                    )
                    (if (equal (nth i tokens) "OP_CP")
                        (decf parCounter 1)
                        (setq syntaxError nil)
                    )
                    (when (equal (nth i tokens) "OP_OP")
                        ;(incf parCounter 1)
                        (incf expiCounter 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (equal (nth i tokens) "OP_OP")
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            (setq comeFromParser (parser totalList))
                            (if (integerp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (when syntaxError
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                        )
                        (setq syntaxError nil)
                    )
                    (when syntaxError
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                    (incf i 1)
                )
                (if (= expiCounter 2)
                    (when (or (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_CONCAT")) 
                          (and (equal (nth i tokens) "OP_OP") (equal (nth (+ i 1) tokens) "KW_APPEND"))
                          (equal (nth i tokens) "OP_LISTOP"))
                        (incf explistFlag 1)
                        (let ((index i)(totalList (list ))(counter 1)(comeFromParser ))
                            (loop while (not (equal counter 0))
                                do
                                (setq i (+ i 1))
                                (if (or (equal (nth i tokens) "OP_OP") (equal (nth i tokens) "OP_LISTOP"))
                                    (incf counter 1)
                                    (if (equal (nth i tokens) "OP_CP")
                                        (decf counter 1)
                                    )
                                )
                            )
                            (setq totalList(append totalList (list (subseq chars index (+ i 1)))))
                            (setq totalList(append totalList (list (subseq tokens index (+ i 1)))))  
                            ;(print totalList)
                            (setq comeFromParser (parser totalList))
                            (if (listp comeFromParser)
                                (setq syntaxError nil)
                            (setq syntaxError t)
                            )
                            (if (not syntaxError)
                                (setq listSum comeFromParser)
                            (when t
                                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                                (return-from parser "[404]")
                            )
                            )
                        )
                    )
                    (when t
                        (format t "SYNTAX_ERROR Expression not recognized~%~%")
                        (return-from parser "[404]")
                    )
                )
                (if (and (= explistFlag 1) (= i (- (length chars) 2)))
                    (setq result listSum)
                (when t
                    (format t "SYNTAX_ERROR Expression not recognized~%~%")
                    (return-from parser "[404]")
                )
                )
            )   
        )
        (if errorFlag
            (when t
                (format t "SYNTAX_ERROR Expression not recognized~%~%")
                (return-from parser "[404]")
            )
        result
        )
        
    )
)

;This function runs the interpreter with file(1 input) or with input stream(0 input).
(defun gppinterpreter( &optional filename )
    (if (equal filename nil)
        (read-terminal-g++)
    (read-file-g++ filename)
    )
)

;Main function 
(defun main()
    (let ((user-input ""))
        (format t "$")
        (setq user-input (read-line))
        (when (< (length user-input) 3)
            (format t "Your g++ command is not correct! You can write \"g++\" or \"g++ <filename>.g++\". ~%")
            (return-from main)
        )
        (if (equal user-input "g++")
            (gppinterpreter)
            (if (equal "g++"(subseq user-input 0 3))
                (gppinterpreter (subseq user-input 4 (length user-input)))
                (format t "Your g++ command is not correct! You can write \"g++\" or \"g++ <filename>.g++\". ~%")
            )
        )
    )
)

(main)