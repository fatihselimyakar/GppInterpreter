; *********************************************
; *  341 Programming Languages HW2-Part2      *
; *  Fall 2019                                *
; *  Author: Fatih Selim Yakar                *
; *  No: 161044054                            *
; *********************************************

;KEYWORDS
(defconstant DEFFUN "KW_DEFFUN")
(defconstant CONCAT "KW_CONCAT")
(defconstant FALSE "KW_FALSE")
(defconstant APPEND "KW_APPEND")
(defconstant EQUAL "KW_EQUAL")
(defconstant TRUE "KW_TRUE")
(defconstant DISP "KW_DISP")
(defconstant EXIT "KW_EXIT")
(defconstant LESS "KW_LESS")
(defconstant LIST "KW_LIST")
(defconstant AND "KW_AND")
(defconstant SET "KW_SET")
(defconstant FOR "KW_FOR")
(defconstant NL "KW_NIL")
(defconstant NOT "KW_NOT")
(defconstant OR "KW_OR")
(defconstant IF "KW_IF")
(defconstant LOAD "KW_LOAD")

;OPERATORS
(defconstant DBLMULT "OP_DBLMULT")
(defconstant PLUS "OP_PLUS")
(defconstant MINUS "OP_MINUS")
(defconstant DIV "OP_DIV")
(defconstant MULT "OP_MULT")
(defconstant OP "OP_OP")
(defconstant CP "OP_CP")
(defconstant OC "OP_OC")
(defconstant CC "OP_CC")
(defconstant COMMA "OP_COMMA")

;VALUES,COMMENTS,IDENTIFIERS
(defconstant VALUE "VALUE")
(defconstant COMMENT "COMMENT")
(defconstant IDENTIFIER "IDENTIFIER")

;Function runs lexer for the file.
(defun read-file-g++ (filename)
	(let ((word-list (list )))
		(with-open-file (file-stream filename)
			(when file-stream
				(loop for line = (read-line file-stream nil)
					while line 
						do 
                        (lexer (concatenate 'string line " "))
                )
				(close file-stream)
			)
		)
	)
)

;Function runs lexer for the terminal.
(defun read-terminal-g++ ()
    (let ((user-input ""))
        (loop while (not (equal user-input "(exit)"))
            do
            (format t ">")
            (setq user-input (read-line))
            (lexer user-input)
        )
    )
)

;Lexical analyzer for g++
(defun lexer(np_string)
    (let( (c_count 0) (mult_flag nil) (id_flag nil) (digitList (list #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)) 
          (alphabet '(#\a #\b #\c #\d #\e #\f #\g #\h #\i #\j #\k #\l #\m #\n #\o #\p #\q #\r #\s #\t #\u #\v #\w #\x #\y #\z)) )
        (loop for i from 0 to (- (length np_string) 1)
            do
            (setq id_flag nil)
            (setq mult_flag nil)
            (loop while (and (or (equal (char np_string i) #\Space) (equal (char np_string i) #\newline) (equal (char np_string i) #\tab)) (< i (- (length np_string) 1)) )
                do
                (setq i (+ i 1))
            )
            ;2 CHARACTER LEXEME'S HANDLING
            ;Comment handling ---> ";;".*
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) ";;")
                    (format t "~A ~%" COMMENT)
                    (setq id_flag T)
                    (return-from lexer)
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "or")
                    (let ((flag t))
                        (if (<= (+ i 2) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 2)) digitList)) (not (member (char np_string (+ i 2)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" OR)
                            (setq id_flag T)
                            (setq i (+ i 1))
                        )
                    )  
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "if")
                    (let ((flag t))
                        (if (<= (+ i 2) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 2)) digitList)) (not (member (char np_string (+ i 2)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" IF)
                            (setq id_flag T)
                            (setq i (+ i 1))
                        )
                    ) 
                )
            )
            (if (<= (+ i 1) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 2)) "**")
                    (format t "~A ~%" DBLMULT)
                    (setq id_flag T)
                    (setq i (+ i 1))
                    (setq mult_flag t)
                )
            )
            ;1 CHARACTER LEXEME'S HANDLING
            (when (equal (subseq np_string i (+ i 1)) "+")
                (format t "~A ~%" PLUS)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "-")
                (format t "~A ~%" MINUS)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "/")
                (format t "~A ~%" DIV)
                (setq id_flag T)
            )
            (when (and (equal (subseq np_string i (+ i 1)) "*") (equal mult_flag nil))
                (format t "~A ~%" MULT)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "(")
                (format t "~A ~%" OP)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) ")")
                (format t "~A ~%" CP)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) ",")
                (format t "~A ~%" COMMA)
                (setq id_flag T)
            )
            (when (equal (subseq np_string i (+ i 1)) "\"")
                (if (= (mod c_count 2) 0)
                    (format t "~A ~%" OC)
                (format t "~A ~%" CC)
                )
                (setq c_count (+ c_count 1))
                (setq id_flag T)
            )
            ;3 CHARACTER LEXEME'S HANDLING 
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "and")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" AND)
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )       
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "not")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" NOT)
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )   
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "nil")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" NL)
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "set")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" SET)
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            (if (<= (+ i 2) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 3)) "for")
                    (let ((flag t))
                        (if (<= (+ i 3) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 3)) digitList)) (not (member (char np_string (+ i 3)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" FOR)
                            (setq id_flag T)
                            (setq i (+ i 2))
                        )
                    )  
                )
            )
            ;4 CHARACTER LEXEME'S HANDLING 
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "less")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" LESS)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )    
                )
            )
            (when (<= (+ i 3) (- (length np_string) 1)) 
                (when (equal (subseq np_string i (+ i 4)) "list")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" LIST)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )    
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "load")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" LOAD)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    ) 
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "exit")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" EXIT)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "disp")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" DISP)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 3) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 4)) "true")
                    (let ((flag t))
                        (if (<= (+ i 4) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 4)) digitList)) (not (member (char np_string (+ i 4)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" TRUE)
                            (setq i (+ i 3))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;5 CHARACTER LEXEME'S HANDLING
            (if (<= (+ i 4) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 5)) "equal")
                    (let ((flag t))
                        (if (<= (+ i 5) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 5)) digitList)) (not (member (char np_string (+ i 5)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" EQUAL)
                            (setq i (+ i 4))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 4) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 5)) "false")
                    (let ((flag t))
                        (if (<= (+ i 5) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 5)) digitList)) (not (member (char np_string (+ i 5)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" FALSE)
                            (setq i (+ i 4))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;6 CHARACTER LEXEME'S HANDLING
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "append")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" APPEND)
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    )
                )
            )
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "concat")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" CONCAT)
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    ) 
                )
            )
            (if (<= (+ i 5) (- (length np_string) 1))
                (when (equal (subseq np_string i (+ i 6)) "deffun")
                    (let ((flag t))
                        (if (<= (+ i 6) (- (length np_string) 1)) 
                            (if (and (not (member (char np_string (+ i 6)) digitList)) (not (member (char np_string (+ i 6)) alphabet)))
                                (setq flag t)
                                (setq flag nil)
                            )
                        )
                        (when flag
                            (format t "~A ~%" DEFFUN)
                            (setq i (+ i 5))
                            (setq id_flag T)
                        )
                    )
                )
            )
            ;FOR VALUES --->[1-9][0-9]*|"0"
            (when (member (char np_string i) digitList)
                ;FOR VALUE ---> "0"
                (if (<= (+ i 1) (- (length np_string) 1))
                    (when (and (equal (char np_string i) #\0) (not (member (char np_string (+ i 1)) digitList)))
                        (format t "~A ~%" VALUE)
                        (setq id_flag T)
                    )
                )
                (when (and (= i (- (length np_string) 1)) (equal (char np_string i) #\0))
                    (format t "~A ~%" VALUE)
                    (setq id_flag T)
                )
                ;FOR VALUE ---> [1-9][0-9]* 
                (when (not (equal (char np_string i) #\0))
                    (loop while (and (member (char np_string i) digitList) (<= i (- (length np_string) 1)))
                        do
                        (setq i (+ i 1))           
                    )
                    (format t "~A ~%" VALUE)
                    (setq i (- i 1))
                    (setq id_flag T)
                )
            )
            ;FOR IDENTIFIERS ---> [a-zA-Z][a-zA-Z0-9]*
            (when (and (equal id_flag nil) (member (char-downcase (char np_string i)) alphabet))
                (loop while (and (or (member (char-downcase (char np_string i)) alphabet) (member (char np_string i) digitList) ) (<= i (- (length np_string) 1)))
                    do
                    (setq i (+ i 1))
                )
                (format t "~A ~%" IDENTIFIER)
                (setq i (- i 1))
                (setq id_flag T)     
            )
            ;FOR ERROR
            (when (and (equal id_flag nil) (not (or (equal (char np_string i) #\Space) (equal (char np_string i) #\newline) (equal (char np_string i) #\tab))))
                (format t "SYNTAX ERROR IN ~A SYMBOL!~%" (char np_string i))
                (return-from lexer)
            )
        )
    )
)

;This function runs the interpreter with file(1 input) or with input stream(0 input).
(defun gppinterpreter( &optional filename )
    (if (equal filename nil)
        (read-terminal-g++)
    (read-file-g++ filename)
    )
)

;Main function 
(defun main()
    (let ((user-input ""))
        (format t "$")
        (setq user-input (read-line))
        (when (< (length user-input) 3)
            (format t "Your g++ command is not correct! You can write \"g++\" or \"g++ <filename>.g++\". ~%")
            (return-from main)
        )
        (if (equal user-input "g++")
            (gppinterpreter)
            (if (equal "g++"(subseq user-input 0 3))
                (gppinterpreter (subseq user-input 4 (length user-input)))
                (format t "Your g++ command is not correct! You can write \"g++\" or \"g++ <filename>.g++\". ~%")
            )
        )
    )
)

(main)